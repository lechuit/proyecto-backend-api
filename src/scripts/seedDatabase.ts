import { prisma } from '../config/database';
import bcrypt from 'bcryptjs';

const mockBooks = [
  {
    title: 'Cien a√±os de soledad',
    authors: ['Gabriel Garc√≠a M√°rquez'],
    description: 'Una obra maestra del realismo m√°gico',
    imageUrl: 'https://picsum.photos/200/300?random=20',
    isbn: '9780060883287',
    publishedDate: '1967',
    categories: ['Realismo M√°gico', 'Literatura Latinoamericana']
  },
  {
    title: 'Harry Potter y la Piedra Filosofal',
    authors: ['J.K. Rowling'],
    description: 'El primer libro de la saga de Harry Potter',
    imageUrl: 'https://picsum.photos/200/300?random=21',
    isbn: '9780439708180',
    publishedDate: '1997',
    categories: ['Fantas√≠a', 'Juvenil']
  },
  {
    title: 'El marciano',
    authors: ['Andy Weir'],
    description: 'Ciencia ficci√≥n sobre supervivencia en Marte',
    imageUrl: 'https://picsum.photos/200/300?random=22',
    isbn: '9780553418026',
    publishedDate: '2011',
    categories: ['Ciencia Ficci√≥n', 'Aventura']
  },
  {
    title: 'Orgullo y prejuicio',
    authors: ['Jane Austen'],
    description: 'Cl√°sico de la literatura inglesa',
    imageUrl: 'https://picsum.photos/200/300?random=23',
    isbn: '9780141439518',
    publishedDate: '1813',
    categories: ['Romance', 'Cl√°sicos']
  },
  {
    title: '1984',
    authors: ['George Orwell'],
    description: 'Distop√≠a cl√°sica sobre un estado totalitario',
    imageUrl: 'https://picsum.photos/200/300?random=24',
    isbn: '9780451524935',
    publishedDate: '1949',
    categories: ['Distop√≠a', 'Ciencia Ficci√≥n']
  }
];

const mockUsers = [
  {
    email: 'maria@email.com',
    username: 'maria_lectora',
    displayName: 'Mar√≠a Gonz√°lez',
    bio: 'Amante de los cl√°sicos latinoamericanos üìö',
    avatar: 'https://picsum.photos/80/80?random=10'
  },
  {
    email: 'carlos@email.com',
    username: 'wizard_reader',
    displayName: 'Carlos M√°gico',
    bio: 'Fan de fantas√≠a y Harry Potter ‚ö°',
    avatar: 'https://picsum.photos/80/80?random=11'
  },
  {
    email: 'ana@email.com',
    username: 'bookworm2025',
    displayName: 'Ana Lectora',
    bio: 'Meta 2025: 52 libros üéØ Ya voy por 18!',
    avatar: 'https://picsum.photos/80/80?random=12'
  },
  {
    email: 'roberto@email.com',
    username: 'scifi_fan',
    displayName: 'Roberto Espacial',
    bio: 'Ciencia ficci√≥n y exploraci√≥n espacial üöÄ',
    avatar: 'https://picsum.photos/80/80?random=13'
  },
  {
    email: 'elena@email.com',
    username: 'classic_lover',
    displayName: 'Elena Cl√°sica',
    bio: 'Los cl√°sicos nunca pasan de moda üìñ',
    avatar: 'https://picsum.photos/80/80?random=14'
  }
];

const mockPosts = [
  {
    content: '¬°Acabo de terminar "Cien a√±os de soledad" y estoy completamente fascinado! üìö La forma en que Garc√≠a M√°rquez teje la realidad con elementos m√°gicos es simplemente extraordinaria. ¬øAlguien m√°s ha le√≠do este cl√°sico?',
    imageUrl: 'https://picsum.photos/400/300?random=1',
    userIndex: 0,
    bookIndex: 0
  },
  {
    content: 'Empezando mi viaje por la saga de Harry Potter otra vez ü™Ñ Nunca me canso de volver a Hogwarts. ¬øCu√°l es su libro favorito de la saga?',
    userIndex: 1,
    bookIndex: 1
  },
  {
    content: 'Meta de lectura 2025: 52 libros üìà ¬°Ya voy por el libro n√∫mero 18! ¬øAlguien m√°s se ha puesto metas de lectura este a√±o?',
    imageUrl: 'https://picsum.photos/400/250?random=2',
    userIndex: 2,
    bookIndex: null
  },
  {
    content: '¬øAlguien tiene recomendaciones de ciencia ficci√≥n? Acabo de terminar "El marciano" y necesito algo similar üöÄ',
    userIndex: 3,
    bookIndex: 2
  },
  {
    content: 'Primer d√≠a de mi club de lectura local üìñ Vamos a leer "Orgullo y prejuicio". ¬°Estoy emocionada de discutir los cl√°sicos con m√°s gente!',
    imageUrl: 'https://picsum.photos/400/300?random=3',
    userIndex: 4,
    bookIndex: 3
  },
  {
    content: 'Reflexionando sobre "1984" de Orwell. Cada vez que lo releo, encuentro nuevas capas de significado. La vigilancia masiva que describe parece cada vez m√°s relevante.',
    userIndex: 0,
    bookIndex: 4
  },
  {
    content: 'Termin√© mi primer marat√≥n de lectura del a√±o üìö‚ú® 5 libros en una semana. Agotador pero incre√≠blemente satisfactorio.',
    imageUrl: 'https://picsum.photos/400/300?random=4',
    userIndex: 2,
    bookIndex: null
  },
  {
    content: 'Buscando el regalo perfecto para mi sobrina que est√° empezando a leer. ¬øAlguna recomendaci√≥n para lectores j√≥venes?',
    userIndex: 4,
    bookIndex: null
  }
];

export async function seedDatabase(cleanOnly = false) {
  try {
    console.log(cleanOnly ? 'üßπ Iniciando limpieza de la base de datos...' : 'üå± Iniciando poblaci√≥n de la base de datos...');

    // Clear existing data
    await prisma.like.deleteMany();
    await prisma.comment.deleteMany();
    await prisma.follow.deleteMany();
    await prisma.post.deleteMany();
    await prisma.book.deleteMany();
    await prisma.user.deleteMany();
    console.log('üóëÔ∏è Datos anteriores eliminados');

    if (cleanOnly) {
      console.log('‚úÖ Base de datos limpiada exitosamente!');
      console.log('üìä Todas las tablas est√°n ahora vac√≠as');
      return;
    }

    // Create books
    console.log('üìö Creando libros...');
    const createdBooks = [];
    for (const book of mockBooks) {
      const createdBook = await prisma.book.create({
        data: {
          title: book.title,
          authors: JSON.stringify(book.authors), // Convert array to JSON string
          description: book.description,
          imageUrl: book.imageUrl,
          isbn: book.isbn,
          publishedDate: book.publishedDate,
          categories: JSON.stringify(book.categories) // Convert array to JSON string
        }
      });
      createdBooks.push(createdBook);
    }
    console.log(`‚úÖ ${createdBooks.length} libros creados`);

    // Create users
    console.log('üë• Creando usuarios...');
    const createdUsers = [];
    const hashedPassword = await bcrypt.hash('password123', 10);
    
    for (const user of mockUsers) {
      const createdUser = await prisma.user.create({
        data: {
          ...user,
          password: hashedPassword,
          isVerified: Math.random() > 0.5 // Random verification status
        }
      });
      createdUsers.push(createdUser);
    }
    console.log(`‚úÖ ${createdUsers.length} usuarios creados`);

    // Create some follow relationships
    console.log('ü§ù Creando relaciones de seguimiento...');
    const followRelationships = [
      { follower: 0, following: 1 },
      { follower: 0, following: 2 },
      { follower: 1, following: 0 },
      { follower: 1, following: 3 },
      { follower: 2, following: 0 },
      { follower: 2, following: 4 },
      { follower: 3, following: 1 },
      { follower: 4, following: 0 },
      { follower: 4, following: 2 }
    ];

    for (const rel of followRelationships) {
      await prisma.follow.create({
        data: {
          followerId: createdUsers[rel.follower].id,
          followingId: createdUsers[rel.following].id
        }
      });
    }
    console.log(`‚úÖ ${followRelationships.length} relaciones de seguimiento creadas`);

    // Create posts
    console.log('üìù Creando posts...');
    const createdPosts = [];
    for (const post of mockPosts) {
      const createdPost = await prisma.post.create({
        data: {
          content: post.content,
          imageUrl: post.imageUrl,
          authorId: createdUsers[post.userIndex].id,
          bookId: post.bookIndex !== null ? createdBooks[post.bookIndex].id : null,
          createdAt: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000) // Random date in last week
        }
      });
      createdPosts.push(createdPost);
    }
    console.log(`‚úÖ ${createdPosts.length} posts creados`);

    // Create some likes
    console.log('‚ù§Ô∏è Creando likes...');
    const likesData = [];
    for (let i = 0; i < 20; i++) {
      const randomUser = createdUsers[Math.floor(Math.random() * createdUsers.length)];
      const randomPost = createdPosts[Math.floor(Math.random() * createdPosts.length)];
      
      // Avoid duplicate likes
      const existingLike = await prisma.like.findUnique({
        where: {
          userId_postId: {
            userId: randomUser.id,
            postId: randomPost.id
          }
        }
      });

      if (!existingLike) {
        await prisma.like.create({
          data: {
            userId: randomUser.id,
            postId: randomPost.id
          }
        });
        likesData.push({ userId: randomUser.id, postId: randomPost.id });
      }
    }
    console.log(`‚úÖ ${likesData.length} likes creados`);

    // Create some comments
    console.log('üí¨ Creando comentarios...');
    const comments = [
      'Me encanta este libro tambi√©n!',
      'Excelente recomendaci√≥n üëç',
      'Tengo que leerlo definitivamente',
      'Totalmente de acuerdo contigo',
      'Gracias por compartir!',
      '¬øTienes m√°s recomendaciones similares?',
      'Acabo de agregarlo a mi lista de lectura',
      'Una de mis sagas favoritas!',
      'Muy buena reflexi√≥n',
      'Inspiring! üìö'
    ];

    for (let i = 0; i < 15; i++) {
      const randomUser = createdUsers[Math.floor(Math.random() * createdUsers.length)];
      const randomPost = createdPosts[Math.floor(Math.random() * createdPosts.length)];
      const randomComment = comments[Math.floor(Math.random() * comments.length)];
      
      await prisma.comment.create({
        data: {
          content: randomComment,
          userId: randomUser.id,
          postId: randomPost.id,
          createdAt: new Date(Date.now() - Math.random() * 3 * 24 * 60 * 60 * 1000) // Random date in last 3 days
        }
      });
    }
    console.log('‚úÖ 15 comentarios creados');

    console.log('üéâ ¬°Base de datos poblada exitosamente!');
    console.log('üìä Datos creados:');
    console.log(`   - ${createdBooks.length} libros`);
    console.log(`   - ${createdUsers.length} usuarios`);
    console.log(`   - ${followRelationships.length} relaciones de seguimiento`);
    console.log(`   - ${createdPosts.length} posts`);
    console.log(`   - ${likesData.length} likes`);
    console.log('   - 15 comentarios');
    console.log('');
    console.log('üë§ Usuarios de prueba (password: password123):');
    createdUsers.forEach(user => {
      console.log(`   - ${user.email} (@${user.username})`);
    });

  } catch (error) {
    console.error('‚ùå Error poblando la base de datos:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Run if called directly
if (require.main === module) {
  const cleanOnly = process.argv.includes('--clean');
  
  seedDatabase(cleanOnly)
    .then(() => {
      console.log(cleanOnly ? '‚úÖ Limpieza completada' : '‚úÖ Script completado');
      process.exit(0);
    })
    .catch((error) => {
      console.error(cleanOnly ? '‚ùå Limpieza fall√≥:' : '‚ùå Script fall√≥:', error);
      process.exit(1);
    });
}
