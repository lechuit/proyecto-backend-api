import { Request, Response } from 'express';
import { PrismaClient, SystemListType } from '@prisma/client';
import { ReadingListService } from '../services/readingList.service';
import { 
  CreateReadingListDto, 
  UpdateReadingListDto, 
  AddBookToListDto, 
  ReorderBooksDto 
} from '../models/readingList.types';

/**
 * Controller for Reading List operations
 * Follows Single Responsibility Principle and dependency injection
 */
export class ReadingListController {
  private readingListService: ReadingListService;

  constructor(prisma: PrismaClient) {
    this.readingListService = new ReadingListService(prisma);
  }

  /**
   * Create a new reading list
   * POST /api/reading-lists
   */
  createReadingList = async (req: Request, res: Response): Promise<void> => {
    try {
      const userId = req.user?.id;
      if (!userId) {
        res.status(401).json({ error: 'Authentication required' });
        return;
      }

      const data: CreateReadingListDto = req.body;
      
      // Basic validation
      if (!data.name || data.name.trim().length === 0) {
        res.status(400).json({ error: 'List name is required' });
        return;
      }

      if (data.name.length > 100) {
        res.status(400).json({ error: 'List name must be 100 characters or less' });
        return;
      }

      const list = await this.readingListService.createReadingList(userId, {
        name: data.name.trim(),
        description: data.description?.trim(),
        isPublic: data.isPublic,
      });

      res.status(201).json(list);
    } catch (error) {
      console.error('Error creating reading list:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  };

  /**
   * Get user's reading lists
   * GET /api/reading-lists
   */
  getUserReadingLists = async (req: Request, res: Response): Promise<void> => {
    try {
      const userId = req.user?.id;
      if (!userId) {
        res.status(401).json({ error: 'Authentication required' });
        return;
      }

      const lists = await this.readingListService.getUserReadingLists(userId);
      res.json(lists);
    } catch (error) {
      console.error('Error fetching user reading lists:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  };

  /**
   * Get a specific reading list
   * GET /api/reading-lists/:id
   */
  getReadingList = async (req: Request, res: Response): Promise<void> => {
    try {
      const { id } = req.params;
      const requestingUserId = req.user?.id;

      const list = await this.readingListService.getReadingListById(id, requestingUserId);
      
      if (!list) {
        res.status(404).json({ error: 'Reading list not found' });
        return;
      }

      res.json(list);
    } catch (error) {
      console.error('Error fetching reading list:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  };

  /**
   * Get public reading lists for discovery
   * GET /api/reading-lists/public
   */
  getPublicReadingLists = async (req: Request, res: Response): Promise<void> => {
    try {
      const limit = parseInt(req.query.limit as string) || 20;
      const offset = parseInt(req.query.offset as string) || 0;

      if (limit > 100) {
        res.status(400).json({ error: 'Limit cannot exceed 100' });
        return;
      }

      const lists = await this.readingListService.getPublicReadingLists(limit, offset);
      res.json(lists);
    } catch (error) {
      console.error('Error fetching public reading lists:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  };

  /**
   * Update reading list details
   * PUT /api/reading-lists/:id
   */
  updateReadingList = async (req: Request, res: Response): Promise<void> => {
    try {
      const { id } = req.params;
      const userId = req.user?.id;
      
      if (!userId) {
        res.status(401).json({ error: 'Authentication required' });
        return;
      }

      const data: UpdateReadingListDto = req.body;

      // Validation
      if (data.name !== undefined) {
        if (!data.name || data.name.trim().length === 0) {
          res.status(400).json({ error: 'List name cannot be empty' });
          return;
        }
        if (data.name.length > 100) {
          res.status(400).json({ error: 'List name must be 100 characters or less' });
          return;
        }
      }

      const updatedList = await this.readingListService.updateReadingList(id, userId, {
        name: data.name?.trim(),
        description: data.description?.trim(),
        isPublic: data.isPublic,
      });

      if (!updatedList) {
        res.status(404).json({ error: 'Reading list not found or access denied' });
        return;
      }

      res.json(updatedList);
    } catch (error) {
      console.error('Error updating reading list:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  };

  /**
   * Delete a reading list
   * DELETE /api/reading-lists/:id
   */
  deleteReadingList = async (req: Request, res: Response): Promise<void> => {
    try {
      const { id } = req.params;
      const userId = req.user?.id;
      
      if (!userId) {
        res.status(401).json({ error: 'Authentication required' });
        return;
      }

      const success = await this.readingListService.deleteReadingList(id, userId);

      if (!success) {
        res.status(404).json({ error: 'Reading list not found or access denied' });
        return;
      }

      res.status(204).send();
    } catch (error) {
      console.error('Error deleting reading list:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  };

  /**
   * Add a book to a reading list
   * POST /api/reading-lists/:id/books
   */
  addBookToList = async (req: Request, res: Response): Promise<void> => {
    try {
      const { id } = req.params;
      const userId = req.user?.id;
      
      if (!userId) {
        res.status(401).json({ error: 'Authentication required' });
        return;
      }

      const data: AddBookToListDto = req.body;

      // Validation
      if (!data.bookId) {
        res.status(400).json({ error: 'Book ID is required' });
        return;
      }

      const item = await this.readingListService.addBookToList(id, userId, data);

      if (!item) {
        res.status(404).json({ error: 'Reading list not found or access denied' });
        return;
      }

      res.status(201).json(item);
    } catch (error) {
      if (error instanceof Error && error.message === 'Book already exists in this list') {
        res.status(409).json({ error: 'Book already exists in this list' });
        return;
      }
      console.error('Error adding book to list:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  };

  /**
   * Remove a book from a reading list
   * DELETE /api/reading-lists/:id/books/:bookId
   */
  removeBookFromList = async (req: Request, res: Response): Promise<void> => {
    try {
      const { id, bookId } = req.params;
      const userId = req.user?.id;
      
      if (!userId) {
        res.status(401).json({ error: 'Authentication required' });
        return;
      }

      const success = await this.readingListService.removeBookFromList(id, bookId, userId);

      if (!success) {
        res.status(404).json({ error: 'Book not found in list or access denied' });
        return;
      }

      res.status(204).send();
    } catch (error) {
      console.error('Error removing book from list:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  };

  /**
   * Update book order and notes in a list
   * PUT /api/reading-lists/:id/books/:bookId
   */
  updateBookInList = async (req: Request, res: Response): Promise<void> => {
    try {
      const { id, bookId } = req.params;
      const userId = req.user?.id;
      
      if (!userId) {
        res.status(401).json({ error: 'Authentication required' });
        return;
      }

      const { order, notes } = req.body;

      const updatedItem = await this.readingListService.updateBookInList(
        id, 
        bookId, 
        userId, 
        { order, notes }
      );

      if (!updatedItem) {
        res.status(404).json({ error: 'Book not found in list or access denied' });
        return;
      }

      res.json(updatedItem);
    } catch (error) {
      console.error('Error updating book in list:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  };

  /**
   * Reorder books in a reading list
   * PUT /api/reading-lists/:id/reorder
   */
  reorderBooksInList = async (req: Request, res: Response): Promise<void> => {
    try {
      const { id } = req.params;
      const userId = req.user?.id;
      
      if (!userId) {
        res.status(401).json({ error: 'Authentication required' });
        return;
      }

      const { bookIds }: ReorderBooksDto = req.body;

      if (!Array.isArray(bookIds)) {
        res.status(400).json({ error: 'bookIds must be an array' });
        return;
      }

      const updatedItems = await this.readingListService.reorderBooksInList(id, userId, bookIds);
      res.json(updatedItems);
    } catch (error) {
      if (error instanceof Error && error.message === 'List not found or access denied') {
        res.status(404).json({ error: 'Reading list not found or access denied' });
        return;
      }
      console.error('Error reordering books in list:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  };

  /**
   * Get system list by type
   * GET /api/reading-lists/system/:type
   */
  getSystemList = async (req: Request, res: Response): Promise<void> => {
    try {
      const { type } = req.params;
      const userId = req.user?.id;
      
      if (!userId) {
        res.status(401).json({ error: 'Authentication required' });
        return;
      }

      // Validate system type
      if (!Object.values(SystemListType).includes(type as SystemListType)) {
        res.status(400).json({ error: 'Invalid system list type' });
        return;
      }

      const list = await this.readingListService.getSystemList(userId, type as SystemListType);
      
      if (!list) {
        res.status(404).json({ error: 'System list not found' });
        return;
      }

      res.json(list);
    } catch (error) {
      console.error('Error fetching system list:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  };

  /**
   * Update book page marker in a list
   * PUT /api/reading-lists/:id/books/:bookId/page-marker
   */
  updateBookPageMarker = async (req: Request, res: Response): Promise<void> => {
    try {
      const { id, bookId } = req.params;
      const userId = req.user?.id;
      
      if (!userId) {
        res.status(401).json({ error: 'Authentication required' });
        return;
      }

      const { currentPage } = req.body;

      // Validation
      if (typeof currentPage !== 'number' || currentPage < 0) {
        res.status(400).json({ error: 'Current page must be a non-negative number' });
        return;
      }

      const updatedItem = await this.readingListService.updateBookPageMarker(
        id,
        bookId,
        userId,
        currentPage
      );

      if (!updatedItem) {
        res.status(404).json({ error: 'Book not found in list or access denied' });
        return;
      }

      res.json(updatedItem);
    } catch (error) {
      console.error('Error updating book page marker:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  };

  /**
   * Complete a book (mark as finished)
   * POST /api/reading-lists/complete-book/:bookId
   */
  completeBook = async (req: Request, res: Response): Promise<void> => {
    try {
      const { bookId } = req.params;
      const userId = req.user?.id;
      
      if (!userId) {
        res.status(401).json({ error: 'Authentication required' });
        return;
      }

      await this.readingListService.completeBook(userId, bookId);
      res.status(200).json({ message: 'Book marked as completed' });
    } catch (error) {
      console.error('Error completing book:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  };
}
