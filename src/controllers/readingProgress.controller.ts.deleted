import { Request, Response } from 'express';
import { PrismaClient, ReadingStatus } from '@prisma/client';
import { ReadingProgressService } from '../services/readingProgress.service';
import { CreateReadingProgressDto, UpdateReadingProgressDto } from '../models/readingProgress.types';

/**
 * Controller for Reading Progress operations
 * Follows Single Responsibility Principle and dependency injection
 */
export class ReadingProgressController {
  private readingProgressService: ReadingProgressService;

  constructor(prisma: PrismaClient) {
    this.readingProgressService = new ReadingProgressService(prisma);
  }

  /**
   * Create or update reading progress
   * POST /api/reading-progress
   */
  createOrUpdateProgress = async (req: Request, res: Response): Promise<void> => {
    try {
      const userId = req.user?.id;
      if (!userId) {
        res.status(401).json({ error: 'Authentication required' });
        return;
      }

      const data: CreateReadingProgressDto = req.body;
      
      // Validation
      if (!data.bookId) {
        res.status(400).json({ error: 'Book ID is required' });
        return;
      }

      if (!data.status || !Object.values(ReadingStatus).includes(data.status)) {
        res.status(400).json({ error: 'Valid status is required' });
        return;
      }

      if (data.currentPage !== undefined && data.currentPage < 0) {
        res.status(400).json({ error: 'Current page cannot be negative' });
        return;
      }

      const progress = await this.readingProgressService.createOrUpdateProgress(userId, data);
      res.status(200).json(progress);
    } catch (error) {
      console.error('Error creating/updating reading progress:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  };

  /**
   * Get reading progress by status
   * GET /api/reading-progress/status/:status
   */
  getProgressByStatus = async (req: Request, res: Response): Promise<void> => {
    try {
      const userId = req.user?.id;
      if (!userId) {
        res.status(401).json({ error: 'Authentication required' });
        return;
      }

      const { status } = req.params;
      
      if (!Object.values(ReadingStatus).includes(status as ReadingStatus)) {
        res.status(400).json({ error: 'Invalid status' });
        return;
      }

      const progress = await this.readingProgressService.getProgressByStatus(
        userId, 
        status as ReadingStatus
      );
      res.json(progress);
    } catch (error) {
      console.error('Error fetching reading progress by status:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  };

  /**
   * Get specific reading progress
   * GET /api/reading-progress/book/:bookId
   */
  getProgress = async (req: Request, res: Response): Promise<void> => {
    try {
      const userId = req.user?.id;
      if (!userId) {
        res.status(401).json({ error: 'Authentication required' });
        return;
      }

      const { bookId } = req.params;
      
      const progress = await this.readingProgressService.getProgress(userId, bookId);
      
      if (!progress) {
        res.status(404).json({ error: 'Reading progress not found' });
        return;
      }

      res.json(progress);
    } catch (error) {
      console.error('Error fetching reading progress:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  };

  /**
   * Update reading progress
   * PUT /api/reading-progress/book/:bookId
   */
  updateProgress = async (req: Request, res: Response): Promise<void> => {
    try {
      const userId = req.user?.id;
      if (!userId) {
        res.status(401).json({ error: 'Authentication required' });
        return;
      }

      const { bookId } = req.params;
      const data: UpdateReadingProgressDto = req.body;

      // Validation
      if (data.status && !Object.values(ReadingStatus).includes(data.status)) {
        res.status(400).json({ error: 'Invalid status' });
        return;
      }

      if (data.currentPage !== undefined && data.currentPage < 0) {
        res.status(400).json({ error: 'Current page cannot be negative' });
        return;
      }

      const progress = await this.readingProgressService.updateProgress(userId, bookId, data);
      
      if (!progress) {
        res.status(404).json({ error: 'Reading progress not found' });
        return;
      }

      res.json(progress);
    } catch (error) {
      console.error('Error updating reading progress:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  };

  /**
   * Delete reading progress
   * DELETE /api/reading-progress/book/:bookId
   */
  deleteProgress = async (req: Request, res: Response): Promise<void> => {
    try {
      const userId = req.user?.id;
      if (!userId) {
        res.status(401).json({ error: 'Authentication required' });
        return;
      }

      const { bookId } = req.params;
      
      const success = await this.readingProgressService.deleteProgress(userId, bookId);
      
      if (!success) {
        res.status(404).json({ error: 'Reading progress not found' });
        return;
      }

      res.status(204).send();
    } catch (error) {
      console.error('Error deleting reading progress:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  };

  /**
   * Get reading statistics
   * GET /api/reading-progress/stats
   */
  getReadingStats = async (req: Request, res: Response): Promise<void> => {
    try {
      const userId = req.user?.id;
      if (!userId) {
        res.status(401).json({ error: 'Authentication required' });
        return;
      }

      const stats = await this.readingProgressService.getReadingStats(userId);
      res.json(stats);
    } catch (error) {
      console.error('Error fetching reading stats:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  };
}